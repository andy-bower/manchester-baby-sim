from unittest import TestCase

from src.core.bitarray import b
from src.machines.ssem import Ssem


class TestLDN1(TestCase):

    def setUp(self):
        pass

    def test_LDN1(self):
        ssem = Ssem()

        initial_store_lines = [
            b("00000000000000000000000000000000"),
            b("10000000000000100000000000000000"),
            b("01000000000000100000000000000000"),
            b("11000000000000100000000000000000"),
            b("00100000000000100000000000000000"),
            b("10100000000000100000000000000000"),
            b("01100000000000100000000000000000"),
            b("11100000000000100000000000000000"),
            b("00010000000000100000000000000000"),
            b("10010000000000100000000000000000"),
            b("01010000000000100000000000000000"),
            b("11010000000000100000000000000000"),
            b("00110000000000100000000000000000"),
            b("10110000000000100000000000000000"),
            b("01110000000000100000000000000000"),
            b("11110000000000100000000000000000"),
            b("00001000000000100000000000000000"),
            b("10001000000000100000000000000000"),
            b("01001000000000100000000000000000"),
            b("11001000000000100000000000000000"),
            b("00101000000000100000000000000000"),
            b("10101000000000100000000000000000"),
            b("01101000000000100000000000000000"),
            b("11101000000000100000000000000000"),
            b("00011000000000100000000000000000"),
            b("10011000000000100000000000000000"),
            b("01011000000000100000000000000000"),
            b("11011000000000100000000000000000"),
            b("00111000000000100000000000000000"),
            b("10111000000000100000000000000000"),
            b("01111000000000100000000000000000"),
            b("11111000000000100000000000000000"),
        ]
        for i, line in enumerate(initial_store_lines):
            ssem.store[i] = line

        for _ in range(35):
            ssem.stop_flag = False
            ssem.instruction_cycle()

            if ssem.stop_flag:
                break

        expected_store_lines = [
            b("00000000000000000000000000000000"),
            b("10000000000000100000000000000000"),
            b("01000000000000100000000000000000"),
            b("11000000000000100000000000000000"),
            b("00100000000000100000000000000000"),
            b("10100000000000100000000000000000"),
            b("01100000000000100000000000000000"),
            b("11100000000000100000000000000000"),
            b("00010000000000100000000000000000"),
            b("10010000000000100000000000000000"),
            b("01010000000000100000000000000000"),
            b("11010000000000100000000000000000"),
            b("00110000000000100000000000000000"),
            b("10110000000000100000000000000000"),
            b("01110000000000100000000000000000"),
            b("11110000000000100000000000000000"),
            b("00001000000000100000000000000000"),
            b("10001000000000100000000000000000"),
            b("01001000000000100000000000000000"),
            b("11001000000000100000000000000000"),
            b("00101000000000100000000000000000"),
            b("10101000000000100000000000000000"),
            b("01101000000000100000000000000000"),
            b("11101000000000100000000000000000"),
            b("00011000000000100000000000000000"),
            b("10011000000000100000000000000000"),
            b("01011000000000100000000000000000"),
            b("11011000000000100000000000000000"),
            b("00111000000000100000000000000000"),
            b("10111000000000100000000000000000"),
            b("01111000000000100000000000000000"),
            b("11111000000000100000000000000000"),
        ]

        for i, line in enumerate(expected_store_lines):
            self.assertEqual(ssem.store[i], line, f"Line {i}")

        self.assertEqual(
            ssem.a,
            b("10111111111111011111111111111111"),
        )
